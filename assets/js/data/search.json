[
  
  {
    "title": "Analysis of the occurrence of loss-streaks in Phil Jackson's rule teams",
    "url": "/posts/anaysing-the-occurance-of-loss-streaks-in-phil-jackson's-rule-teams/",
    "categories": "NBA, Celtics",
    "tags": "nba,, analysis,, basketball,, python",
    "date": "2024-02-15 17:30:08 +0100",
    





    "snippet": "I did a small python script to retrieve this data. I’ll probably do a better job and round up a better analysis later on when I can fully work on it. I’ll probably do some sort of blog post about it so you can always check my twitter to see. I do warn you I mostly talk Celtics there.  Disclaimer 1: while I am saying this is an analysis Phil Jackson positive teams I am actually checking the teams with a win percentage of 0.670 which corresponds to 55-win pace. I will work o checking two things later on which are the full Phil Jackson positive, meaning teams that got 40 wins in their first 59 games as well as checking for teams that might have had stretches of 40 wins in less than 59 games during the season.  Disclaimer 2: I haven’t fully proofed this so if there is some blatant error feel free to tell me so.Teams that won the championshipThere are 207 teams with a win percentage of 0.670 or better since the data is available excluding the current season (1970-71 to 2022-23). Out of these 52 seasons, 42 champions seem to have this win rate. As said in the Disclaimer 1, this not necessarily means the 10 teams missing teams aren’t Phil Jackson positive, a great example is the 2021-22 Warriors who finished 2 wins below this 0.670 win rate but were Phil Jackson positive.Out of these 42 teams a pretty impressive 34 teams have registered 3 or more occurrences  of loss-streaks. I would highlight the most impressive one being the 1971-72 Lakers who had three occurrences  of loss-streaks (though only 2 games in a row at each time) while having a 69-13 record and the league best-ever winstreak at 33 games. Two other teams that can be highlighted in this range of 3 ocurrances are the 2019-20 Lakers, the 2011-12 Heat and the 1998-99 because of the length of their season. The Spurs managed to have three occurrences  in a total of 50 games (finished 37-13), one of which was a three game loss streak. The Heat managed to have six occurrences  in 20 losses and 66 total games, one of them being a three-game loss-streak.Other teams that won that are highlighted worth: are the 1989-90 Pistons and 2017-18 Warriors, the only teams with lower than 60 wins to have less than four occurrences . Then there are two teams that won 60 or more games and have registered less than five occurrences ; the 1987-1988 Lakers are the only 60+ win team to register five or more occurrences .I also checked the trends by year in a line plot, but for the champions it seems mostly that this doesn’t matter much, looks a lot like noiseRunner UpsOut of the 207 teams, there are 30 runner-ups analyzed here. The two more impressive ones are the 2015-16 Warriors (73-9), the only team with no loss-streak in these 207 and the 1995-96 Supersonics that had only one loss-streak (like the team that beat them in the Bulls). It seems that a lot of runner ups register four occurrences  in a season so that might have some correlation but then again, very sample size. There isn’t much to analyse  here. There isn’t interesting cases here in terms of quantity, it would look like the trends show that runner-ups tend to register less occurrences  of loss-streaks more recently, but its mostly due to the lower amount of samples.Teams that didn’t make to the finalsHere is more a way to see really good teams that didn’t make the finals. The best record to do so is the 2006-07 Mavericks, then you have the 2008-09 Cavs, 2015-16 Spurs, 1972-73 Celtics, 2017-18 Rockets which are the teams with 65+ wins."
  },
  
  {
    "title": "Predicting the 23-24 Celtics rotation and its current needs",
    "url": "/posts/predicting-the-23-24-celtics-rotation-and-its-current-needs/",
    "categories": "Basketball, Celtics",
    "tags": "celtics, analysis, basketball",
    "date": "2023-07-26 11:30:58 +0200",
    





    "snippet": "Assumptions  The Celtics are pushing for more double-big lineups  Both Payton Pritchard and Sam Hauser need to improve  Robert Williams needs to be somewhat healthy  Kristaps Porziņģis needs to be healthyData sampleThe data used is going to be all from Basketball Reference, Basketball Index, 538, DARKO since these are the free-to-use websites available.The Double Big ConundrumThe main idea is that the Celtics are moving towards a bigger lineup by adding KP. In the 21-22 season the Celtics became extremely good defensively due to this lineup, they had figured out a death-lineup of sorts anchored by the rim protection of Robert Williams with the switchability of all the four players and the greatness of the DPOY Marcus Smart. In the 22-23 the Celtics seemed to have abandoned the double big in parts because of the decline of three of its cogs in Williams, Horford and Smart but also, as per Grant Williams, due to higher emphasis in the offensive side of things. So all for all, what was the difference between the two years from the bigs perspective?For our information, the Celtics played a total of 19905 minutes in 21-22 which is the equivalent to 82 games and 9 OT. In 22-23 the Celtics played 19980 which is 82 games and 12 OT. For this we will use the basketball reference, I’ll be excluding JT in this as when he plays the PF it is not a double-big lineup. I will also limit myself to the regular season because that much more predictable than the playoffs. Also please be aware that players like Grant and Hernangómez might’ve played (per BBRef) as the SF a small percentage, so adding up the %s will not always be 100%. For the 2021-2022 season we had the following distribution:            Player      G      MP      % as PF      % as C      MP as PF      MP as C                  Al Horford      69      2005      1%      99%      20.05      1984.95              Grant Williams      77      1875      94%      3%      1762.5      56.25                  Robert Williams      61      1804      42%      58%      757.68      1046.32              Enes Freedom      35      411             100%      0      411              Daniel Theis      21      393      32%      68%      125.76      267.24              Jabari Parker      12      112      28%      72%      31.36      80.64              Juancho Hernangómez      18      96      84%      5%      80.64      4.8              Luke Kornet      12      85             100%      0      85              Bruno Fernando      20      58      12%      88%      6.96      51.04              Totals             6839                    2784.95      3987.24      From our 2022-2023 season this is the distribution:            Player      G      MP      % as PF      % as C      MP as PF      MP as C                  Grant Williams      79      2045      86%      8%      1758.7      163.6              Al Horford      63      1922      8%      92%      153.76      1768.24              Robert Williams      35      824      46%      53%      379.04      436.72              Luke Kornet      69      804             100%      0      804              Blake Griffin      41      569      23%      76%      130.87      432.44              Mike Muscala      20      323      26%      74%      83.98      239.02              Noah Vonleh      23      171      20%      80%      34.2      136.8              Totals             6658                    2540.55      3980.82      From our total minutes played on the combined PF and C position we played 85.9% of the time with the listed players in 21-22, 83.3% with the listed players in 22-23. The tricky part is now predicting this. I would bet we try more the double big, I would also bet that the numbers for 21-22 are skewed because of Robs injury to end the year and because we sucked to begin the 21-22 season. What also happened is that the minutes played as PF from the players listed for 21-22 represented 40.7% of the total minutes played by those players, that was down to 38.2% for the listed players in 22-23. For the center position this jumped from 58.3% in 21-22 to 59.8% in 22-23.I had a few discussions about my idea of minutes distribution recently in this sub. One of which raised the idea of 7500 minutes between the bigs, which would be about 93.8% of the played time in 22-23. I’ll be a bit more conservative. I’ll propose 90% (7174.8) of the playing time of 82 games + 10 OT (7972MP) throughout the season. So how this could look realistically? Well the sad part is we need to figure out actually how conservative we want to be with the players. I’ll be very conservative.            Player      GP      MPG      MP                  Kristaps Porziņģis      65      31      2015              Robert Williams      55      24      1320              Luke Kornet      70      12      840              Al Horford      60      28      1680              Oshae Brissett      65      16      1040              Total                    6895      Based on my ideal projections we’d be short 280 minutes and we would be able to play 86.5% of the minutes shared between the PF and C positions in my scenario. This wouldn’t be bothersome. You could hope for more games of Rob, more minutes of Al/KP/Brisset/Kornet. You could simply be more flexible and run a bit more single big throughout the season. The main difference is the amount of contributors. While you can combine Muscala and Vonleh as one contributor you’d still have 6 players capable of sliding in the C postion in 22-23. So it seems we’re missing still one big to be “safe” at least. The second question is who replaces Grant Williams? He played at least 1900 minutes in both years. Who can shoot like him and defend like him? The answer is quite straight forward: Al Horford. The question is whether Al has the legs to do so. Offensively even at age 37 Al Horford is more rounded than Grant. Defensively they’re similar but Horford is a better on-ball defender, Grant relies more on his BBIQ to predict a few things as well as quick hands. Unfortunately I am learning how to study tape in the NBA, so I’ll go from Timi’s highlights of the 2021-2022 for Grant and the 2022-2023 for Horford. I am doing so because I want the best Grant to date. In the majority of the defensive clips/highlights from Grant you have him helping to get a block or him being quick at reading passes, a few times Grant will be quick with his hand to force a steal. Meanwhile, Horford is more capable of defending on-ball to get the blocks.Overall, I’d be worried about how reliable the bigs would be due their health, but if any of Horford, KP or Robert Williams is able to play more than projected with no issues, we might even have an embarrassment of riches in our hands.The Thin Guard DepthIn order to get KP we traded away Marcus Smart. I’ll not get into the heart and soul, defensive impact, etc. I’ll stay with numbers of this. We lost 1957 minutes from Smart. We need to find these minutes elsewhere. What I propose is a combination of trusting Jordan Walsh playing a bit, Sam Hauser getting more burn, Jaylen playing more as the SG and Payton Pritchard being used more. I can’t predict much Walsh and Jaylen we know we can count on him. So lets do the projections and gets our hopes up for Hauser and Pritchard. The comparisons are straight forward. Hauser is Duncan Robinson, Pritchard is Jevon Carter. Please be aware that when I say these names I am not saying Hauser and PP are going to be 1-to-1 copies of Duncan and Carter. The idea is to be able to provide the same impact for the team (and similar minutes).Sam Hauser has proven he has some decent defense and he is deadly as a three point shooter, though some areas can improve. One of the missing points of Hauser’s offensive skill is indeed the ability to dribble and shoot, this can be with a single dribble or even running the PnR. I’ll be more conservative with Hauser, even though Hauser is now at the age Robinson had his best season playing 31.4mpg. Hauser is entering the age Robinson peaked statistically in DARKO, Hauser also came in slightly younger so this is happening later in games played. I want to project Hauser to play at least 22mpg because I think Hauser can be a bit less one-dimensional than Robinson. He has shown ability to dribble and cut even and it seems a few decent writers from this sub (now mostly on CelticsBlog) also like this cutting ability.The second bet I want to have is Payton Pritchard playing at least 17mpg. This is more or less what Jevon Carter played as a 4th year for the Bucks. The counting stats comparison between them is the following (please note tm == Boston is PP):            Season      Age      Tm      Pos      G      GS      MP      FG      FGA      FG%      3P%      2P%      eFG%      FT%      ORB      DRB      TRB      AST      STL      BLK      TOV      PF      PTS                  2018-19      23      MEM      PG      39      3      14.8      1.4      4.7      0.303      0.333      0.265      0.395      0.813      0.4      1.3      1.7      1.8      0.7      0.3      0.8      1.4      4.4              2019-20      24      PHO      PG      58      2      16.3      1.7      4.2      0.416      0.425      0.402      0.543      0.852      0.5      1.5      2      1.4      0.8      0.3      0.6      1.5      4.9              2020-21      25      PHO      PG      60      1      12      1.6      3.7      0.422      0.371      0.528      0.547      0.571      0.3      1.3      1.5      1.2      0.5      0.2      0.3      0.9      4.1              2021-22      26      TOT      PG      66      3      13.7      1.5      3.8      0.387      0.388      0.386      0.518      0.833      0.2      1.5      1.7      1.5      0.4      0.2      0.5      1      4.2              2021-22      26      BRK      PG      46      1      12      1.3      3.8      0.333      0.331      0.34      0.454      0.7      0.2      1.3      1.5      1      0.3      0.2      0.6      1      3.6              2021-22      26      MIL      PG      20      2      17.7      2      4      0.506      0.558      0.444      0.658      1      0.3      1.9      2.2      2.5      0.5      0.2      0.4      1.1      5.6              Season      Age      Tm      Pos      G      GS      MP      FG      FGA      FG%      3P%      2P%      eFG%      FT%      ORB      DRB      TRB      AST      STL      BLK      TOV      PF      PTS              2020-21      23      BOS      SG      66      4      19.2      2.8      6.3      0.44      0.411      0.482      0.562      0.889      0.5      1.9      2.4      1.8      0.6      0.1      0.8      1.6      7.7              2021-22      24      BOS      PG      71      2      14.1      2.3      5.3      0.429      0.412      0.461      0.564      1      0.5      1.4      1.9      2      0.4      0.1      0.6      0.9      6.2              2022-23      25      BOS      PG      48      3      13.4      2.1      5.1      0.412      0.364      0.495      0.527      0.75      0.5      1.3      1.8      1.3      0.3      0      0.8      0.8      5.6      They’re interestingly placed in career. It seems they both need some consistent playing time to be effective. Their DARKO projections is somewhat similar (more so in GP than age). They’re also placed similarly in advanced stats, PP is a better rebounder and less TO prone. Jevon Carter is a better defender it seems from his STL% and BLK% and that translate directly into their DARKO projections, LEBRON and RAPTOR. The interesting thing is that 21-22 Pritchard is deemed much better than any version of Jevon (including 22-23) by RAPTOR while rookie PP in 20-21 is deemed better than any Jevon Carter by LEBRON. Even though Payton and Jevon have similar builds in height, wingspan and weight, Jevon does have athleticism on his side. He has a very fast first step and he is strong to be posted by guys like our own Jayson Tatum. He is truly a pest on defense. We have seen similar offensive attacks from Payton even as a rookie, he was also a pest on defense at that time. Please be aware that PP is doing this Kylian Hayers, Jevon did to guys like DeRozan. Some compilation of better players include Harrison Barnes, Middleton, Ish Smith, Clarkson, Sabonis, annoying Denver. I do think he can be trusted defensively under the correct circumstances. Offensively we know what we’re getting, he will be much more of a shooter than play maker but that’s alright if he needs to be Jevon Carter only.Having somewhat defended what I envision for Payton and Hauser, there is a clear problem that is called Malcom Brogdon Health. We can realistically have enough PG minutes by having Brogdon playing the same minutes as last year, 26MPG and 67 games. We’d need to up a Derrick White’s minutes to 32mpg (similar to Smart). We would need to count with Banton to give us some minutes as well, I’m proposing a bit more than the 31 games at 9MPG he had last year. I am not counting on Justin Champagnie at all to help us with the SG role. The last thing is we’d need to have Jaylen Brown to play much more SG than SF, basically swapping what happened in 22-23 with 21-22.The WingsThe whole strength of this Celtics team is having two elite wings. The problem is, in my opinion, we rely way too much on them. We need to reduce at least a bit their minutes. That’s what I propose. You don’t need much, I’m reducing Jayson and Jaylens minutes by about 3 minutes per game. To do so we need to have a few guys to pan out. Delano Banton, Oshae Brissett, Sam Hauser and Jordan Walsh need to be effective. How much that is is the tricky part, it seems Brissett can be good, but recently he hasn’t really so I don’t want to count too much on him. Banton seems to be the less important one here given he isn’t even guaranteed. Walsh is my wildcard, a specialized player the Celtics drafted with a lower pick. We had a few of those since 2016.  2020-2021: Payton Pritchard 19.2MPG, 66 GP. Aaron Nesmith 14.6MPG, 46 GP,  2019-2020: Grant Williams 15.2MPG, 69 (nice) GP. Romeo Langford: 11.6MPG, 32 GP  2017-2018: Semi Ojeleye 15.8MPG, 73 GP. Abdel Nader 10.9MPG, 48 GPI will ask/hope Walsh to give us 50 games on 12 MPG. That’s all, if he can do better I will gladly accept.The consolidation moveCompiling a bit of what I think is fair for our team I came up with one table that rule them all, or the baseline table            Player      GP      PG%      SG%      SF%      PF%      C%      MPG      PG (MPG)      SG (MPG)      SF (MPG)      PF (MPG)      C (MPG)      PG (Total)      SG (Total)      SF (Total)      PF (Total)      C (Total)                  Derrick White      82      71%      29%      0%      0%      0%      32      22.72      9.28      0      0      0      1863.04      760.96      0      0      0              Malcolm Brogdon      67      61%      39%      0%      0%      0%      26      15.86      10.14      0      0      0      1062.62      679.38      0      0      0              Payton Pritchard      55      100%      0%      0%      0%      0%      17      17      0      0      0      0      935      0      0      0      0              Dalano Banton      40      36%      64%      5%      0%      0%      9      3.24      5.76      0.45      0      0      129.6      230.4      18      0      0              Sam Hauser      80      0%      45%      55%      0%      0%      22      0      9.9      12.1      0      0      0      792      968      0      0              Jayson Tatum      74      0%      13%      65%      24%      0%      34      0      4.25      21.93      8.16      0      0      314.5      1622.82      603.84      0              Jaylen Brown      67      0%      54%      46%      0%      0%      33      0      17.82      15.18      0      0      0      1193.94      1017.06      0      0              Oshae Brissett      65      0%      1%      17%      83%      0%      16      0      0.16      2.72      13.28      0      0      10.4      176.8      863.2      0              Jordan Walsh      60      0%      0%      30%      70%      0%      12      0      0      3.6      8.4      0      0      0      216      504      0              Kristaps Porzingis      65      0%      0%      0%      0%      100%      31      0      0      0      0      31      0      0      0      0      2015              Al Horford      60      0%      0%      0%      79%      21%      28      0      0      0      22.12      5.88      0      0      0      1327.2      352.8              Robert Williams III      55      0%      0%      0%      47%      53%      24      0      0      0      11.28      12.72      0      0      0      620.4      699.6              Luke Kornet      70      0%      0%      0%      0%      100%      12      0      0      0      0      12      0      0      0      0      840              Consolidation player      65      0%      0%      0%      0%      0%      0      0      0      0      0      0      0      0      0      0      0              Total                                                                                          3990.26      3981.58      4018.68      3918.64      3907.4              Positional time                                                                                          3986      3986      3986      3986      3986              Missing time                                                                                          -4.26      4.42      -32.68      67.36      78.6                                                                                                                                     113.44      In this table we’re missing minutes on the C and PF position. This can be easily solved by giving extra minutes/games to Robert Williams, Horford, Kornet, Brissett or KP. We could also consolidate the roster, because I’d like to have about 2-3 games of extra minutes available for all the positions, which is a good 700 or so minutes. This is specifically if we can’t count on a few of the assumptions, from health to the players improving to the players (Walsh/Banton) being good at all. The idea is give this guy 60 games, 15mpg. Thats 900 minutes. I know this is an embarrassment of riches, but we are all somewhat worried about not having enough good players this year so I am being extra cautious here. My idea is this guy needs to be able to play anywhere from the 2 to 4 position being able to at least slide 30 into one position up or down. A very quick draw of a 2-3 consolidation player can be seen here:            Player      GP      PG%      SG%      SF%      PF%      C%      MPG      PG (MPG)      SG (MPG)      SF (MPG)      PF (MPG)      C (MPG)      PG (Total)      SG (Total)      SF (Total)      PF (Total)      C (Total)                  Derrick White      82      71%      29%      0%      0%      0%      32      22.72      9.28      0      0      0      1863.04      760.96      0      0      0              Malcolm Brogdon      67      70%      30%      0%      0%      0%      26      18.2      7.8      0      0      0      1219.4      522.6      0      0      0              Payton Pritchard      55      100%      0%      0%      0%      0%      17      17      0      0      0      0      935      0      0      0      0              Dalano Banton      40      36%      64%      5%      0%      0%      9      3.24      5.76      0.45      0      0      129.6      230.4      18      0      0              Sam Hauser      80      0%      45%      55%      0%      0%      22      0      9.9      12.1      0      0      0      792      968      0      0              Jayson Tatum      74      0%      0%      67%      33%      0%      34      0      0      22.78      11.22      0      0      0      1685.72      830.28      0              Jaylen Brown      67      0%      54%      46%      0%      0%      33      0      17.82      15.18      0      0      0      1193.94      1017.06      0      0              Oshae Brissett      65      0%      0%      5%      95%      0%      16      0      0      0.8      15.2      0      0      0      52      988      0              Jordan Walsh      60      0%      0%      20%      80%      0%      12      0      0      2.4      9.6      0      0      0      144      576      0              Kristaps Porzingis      65      0%      0%      0%      0%      100%      31      0      0      0      0      31      0      0      0      0      2015              Al Horford      60      0%      0%      0%      67%      33%      28      0      0      0      18.76      9.24      0      0      0      1125.6      554.4              Robert Williams III      55      0%      0%      0%      47%      53%      24      0      0      0      11.28      12.72      0      0      0      620.4      699.6              Luke Kornet      70      0%      0%      0%      0%      100%      12      0      0      0      0      12      0      0      0      0      840              Consolidation player      60      0%      70%      30%      0%      0%      15      0      10.5      4.5      0      0      0      630      270      0      0              Total                                                                                          4147.04      4129.9      4154.78      4140.28      4109              Positional time                                                                                          3986      3986      3986      3986      3986              Missing time                                                                                          -161.04      -143.9      -168.78      -154.28      -123                                                                                                                                     -751      I know its a lot of numbers, its a bit annoying to read and all. But having the table in excel this is really quite easy. These consolidation moves can be from the most diverses. Most of them seem to lead to cutting Champagnie IMO though. You can have Lets get into the second appron moves like trading for Kenrich Williams. You can have vet signings like bringing back Javonte Green and Blake Griffin/Taj Gibson or something like that. You can have middle of the pack ones like giving the MLE to Derick Jones Jr. It can simply be that Hauser, PP, Brissett, Walsh and Banton all pan out, or at leas a few ones. There is a lot of possibilities out there for this consolidation. I personally, as a very scared Celtics fan, would like to have one of Kenrich Williams or Derick Jones Jr. I know it would be a lot, but again I am a scared Celtics fan.ConclusionThe main conclusion of this is pretty simple. The Celtics have the tools to have a very good roster and even distribute the minutes very well. The main question is wether these tools work or not at all or for most of the season. I personally would love to see some kind of consolidation signing still. It would leave us with at least one spot open anyhow as I don’t see how you keep Champagnie. Guys like Hauser and PP will need to step up this year. Guys like Brissett, Banton and Walsh will need to prove themselves. If not, the load on the the top8 can (and will in my opinion) be quite significative."
  },
  
  {
    "title": "Re-learning DSP",
    "url": "/posts/re-learning-dsp/",
    "categories": "DSP, SDR",
    "tags": "DSP, SDR",
    "date": "2023-05-19 08:25:23 +0200",
    





    "snippet": "Why re-learn DSPIts been a few years since I last really worked with DSP and SDRs effectively, since I graduated in my masters. While I still remember the basic concepts (specially because I’m currently working with antenna and 5G hardware), how a few things are implemented and calculated need to be re-visited so I can properly build flow-charts in GNURadio for instance. I’ll be mostly using PySDR but any other resource will evidently be added here. I will be following the flow from the website and taking notes on it.Important remindersChapters 1-3 talk about very usual stuff I work it from FDomain to sampling. These are all things I’m quite used so I’m not writing them down, though I’m carefully reading it."
  },
  
  {
    "title": "Getting started with GNU Radio",
    "url": "/posts/getting-started-with-gnu-radio/",
    "categories": "Python, SDR",
    "tags": "python, GNURadio, SDR",
    "date": "2023-05-18 22:06:08 +0200",
    





    "snippet": "Installation &amp; SetupsI’m installing my GNU Radio using radioconda, this was recommended to me in the Matrix community of GNURadio. Most of the setups can be checked there.LearningI’ll start first by going through PySDR, then I’ll add in some sprinkles of Analog Devices Software-Defined Radio for Engineers. Theory will be presented in the post Re-learning DSP of ths website."
  },
  
  {
    "title": "Python script for NBA subreddits sidebar update",
    "url": "/posts/python-script-for-nba-subreddits-sidebar-update/",
    "categories": "Python, PRAW",
    "tags": "python, reddit",
    "date": "2023-04-20 10:52:29 +0200",
    





    "snippet": "This is, hopefully, an in-depth (ELI5) post on how I designed the script. We will use the github repository README as a starting point.Installation and usageThe premise of the code is to use a combination of pandas and praw to get firstly markdown formatted tables from ESPN and then finally to paste those files into reddit. Then github actions to deploy the code every day, scheduled at given time you can find it on .github/worklows.There are a requirement files, since this is ran in Spyder[https://www.spyder-ide.org/] for checks it includes the Spyder-necessary packages. You can simply set-up a venv locally and run pip install -r src/requirements. You might need to add pywin32 manually if running locally on a windows machine. Please be aware that this is configured to be ran by github actions and thus it uses load_dotenv() and github secrets. If running locally you might want to set the reddit instance of praw in praw.ini as following the documentation. The script also has four different LUTs, please be aware that if running something similar for a western conference team you’d need to change the LUT_Standings_newRed and LUT_Standings_oldRed.Further changes based on different subredditsWe use the styles variable to set the different color schemes for the widgets. Please note that the color codes can be easily found when you set manually the widgets on the subreddit. Further, we use a file called restOfSidebar.md found in outputs/ that is the rest of the markdown required for the old reddit setup, please add yours accordingly. Finally, be aware to run locally praw and indentify if your widgets are properly assigned, in our case we have a fixed rules widget which occupies the position widgets.sidebar[0] so we have schedule, roster and standings to be placed at the positions [1], [2], [3] respectively.Constant updatesIn order to keep your repo actions running you need to constantly update the repo. Maximum 3 months without updates are allowed.Look-up-tables (LUTs)The LUTs are required to create the links properly. In old-reddit by linking a team in markdown as such [](r/teamSubrredit) the icon of said subreddit will appear which provides a nice look for the schedule and standings as such:In new reddit it will highlight this (as an hyperlink) and link directly to other teams subreddit. Because of how ESPN handles standings and schedules in their website you need to define two different LUTs. The examples for r/bostonceltics are below:LUT_Standings_newRed = {                 'Milwaukee Bucks':'[Bucks](/r/MkeBucks)',         'Boston Celtics':'[Celtics](/r/bostonceltics)',    'Charlotte Hornets':'[Hornets](/r/CharlotteHornets)',     'Cleveland Cavaliers':'[Cavs](/r/clevelandcavs)',         'New York Knicks':'[Knicks](/r/NYKnicks)',      'Washington Wizards':'[Wizards](/r/washingtonwizards)',           'Atlanta Hawks':'[Hawks](/r/AtlantaHawks)',         'Toronto Raptors':'[Raptors](/r/torontoraptors)',           'Chicago Bulls':'[Bulls](/r/chicagobulls)',           'Brooklyn Nets':'[Nets](/r/GoNets)',        'Detroit Pistons':'[Pistons](/r/DetroitPistons)',     'Philadelphia 76ers':'[Philly](/r/sixers)',         'Indiana Pacers':'[Pacers](/r/pacers)',             'Miami Heat':'[Heat](/r/heat)',          'Orlando Magic':'[Magic](/r/OrlandoMagic)'    }LUT_Standings_oldRed = {                 'Milwaukee Bucks':'[](/r/mkebucks) Bucks',         'Boston Celtics':'[](/r/bostonceltics) Celtics',    'Charlotte Hornets':'[](/r/charlottehornets) Hornets',     'Cleveland Cavaliers':'[](/r/clevelandcavs) Cavs',         'New York Knicks':'[](/r/nyknicks) Knicks',      'Washington Wizards':'[](/r/washingtonwizards) Wizards',           'Atlanta Hawks':'[](/r/atlantahawks) Hawks',         'Toronto Raptors':'[](/r/torontoraptors) Raptors',           'Chicago Bulls':'[](/r/chicagobulls) Bulls',           'Brooklyn Nets':'[](/r/gonets) Nets',        'Detroit Pistons':'[](/r/detroitpistons) Pistons',     'Philadelphia 76ers':'[](/r/sixers) Philly',         'Indiana Pacers':'[](/r/pacers) Pacers',             'Miami Heat':'[](/r/heat) Heat',          'Orlando Magic':'[](/r/orlandomagic) Magic'    }LUT_Teams_newRed = {        'Philadelphia':'[Philly](/r/sixers)',        'Miami':'[Heat](/r/heat)',        'Orlando':'[Magic](/r/OrlandoMagic)',        'Chicago': '[Bulls](/r/chicagobulls)',        'Cleveland':'[Cavs](/r/clevelandcavs)',        'Washington':'[Wizards](/r/washingtonwizards)',        'New York':'[Knicks](/r/NYKnicks)',        'Memphis':'[Memphis](/r/memphisgrizzlies)',        'Detroit':'[Pistons](/r/DetroitPistons)',        'Oklahoma City':'[Thunder](/r/Thunder)',        'Atlanta':'[Hawks](/r/AtlantaHawks)',        'New Orleans':'[Pelicans](/r/NOLAPelicans)',        'Dallas':'[Dallas](/r/Mavericks)',        'Sacramento':'[Kings](/r/kings)',        'Charlotte':'[Hornets](/r/CharlotteHornets)',        'Brooklyn':'[Nets](/r/GoNets)',        'Toronto':'[Raptors](/r/torontoraptors)',        'Phoenix':'[Suns](/r/suns)',        'Golden State':'[Warriors](/r/warriors)',        'LA':'[Clippers](/r/LAClippers)',        'Los Angeles':'[Lakers](/r/lakers)',        'Indiana':'[Pacers](/r/pacers)',        'Milwaukee':'[Bucks](/r/MkeBucks)',        'Houston':'[Houston](/r/rockets)',        'Denver':'[Denver](/r/denvernuggets)',        'San Antonio':'[Spurs](/r/NBASpurs)',        'Portland':'[Blazers](/r/ripcity)',        'Utah':'[Jazz](/r/UtahJazz)',        'Minnesota':'[Wolves](/r/timberwolves)'       }LUT_Teams_oldRed = {        'Philadelphia':'[](/r/sixers)',        'Miami':'[](/r/heat)',        'Orlando':'[](/r/orlandomagic)',        'Chicago': '[](/r/chicagobulls)',        'Cleveland':'[](/r/clevelandcavs)',        'Washington':'[](/r/washingtonwizards)',        'New York':'[](/r/nyknicks)',        'Memphis':'[](/r/memphisgrizzlies)',        'Detroit':'[](/r/detroitpistons)',        'Oklahoma City':'[](/r/thunder)',        'Atlanta':'[](/r/atlantahawks)',        'New Orleans':'[](/r/nolapelicans)',        'Dallas':'[](/r/mavericks)',        'Sacramento':'[](/r/kings)',        'Charlotte':'[](/r/charlottehornets)',        'Brooklyn':'[](/r/gonets)',        'Toronto':'[](/r/torontoraptors)',        'Phoenix':'[](/r/suns)',        'Golden State':'[](/r/warriors)',        'LA':'[](/r/laclippers)',        'Los Angeles':'[](/r/lakers)',        'Indiana':'[](/r/pacers)',        'Milwaukee':'[](/r/mkebucks)',        'Houston':'[](/r/rockets)',        'Denver':'[](/r/denvernuggets)',        'San Antonio':'[](/r/nbaspurs)',        'Portland':'[](/r/ripcity)',        'Utah':'[](/r/utahjazz)',        'Minnesota':'[](/r/timberwolves)'       }Used functionsThis script uses two defined functions useful for the whole season: remove and remove_parts_of_strings. The fist one is used to remove the number from the players names when looking through the roster, the second is to remove non-sense from the teams names for the standings from the position in the standings to whether the team has clinched playoffs or not. The function check_string is mostly used for the playoff and to clean the roster. In the Celtics case Gallinari hasn’t played all year nor should he, so I manually excluded him. But manually doing it for every player in terms of links and all other things is annoying. So this function serves to check whether a string later on is contained in the string with the players profile link, then we can properly assign the link to the player name in markdown automatically.## functions spacedef remove(list):    pattern = '[0-9]'    list = [re.sub(pattern, '', i) for i in list]    return listdef remove_parts_of_string(*strings): #generated by ChatGPT    for string in strings:        # Remove all characters before the first uppercase letter        index = [i for i in range(len(string)) if string[i].isupper()][0]        string = string[index:]                # Remove all characters before the first lowercase letter        index = [i for i in range(len(string)) if string[i].islower()][0]        string = string[index-1:]        return(string)def check_string(string1, string2_series):    string1 = re.sub(r'\\W+', '', string1.lower())    string2_series = string2_series.apply(lambda x: re.sub(r'\\W+', '', x.lower()))    result_series = string2_series.str.contains(string1)    if result_series.any():        return result_series.idxmax()    else:        return -1  # or any other value that indicates no True value was foundRosterTo pick the desired roster one needs to get the ESPN link. To find this link all you need to do is to go to the team’s ESPN page and tap into the Roster tab. For the Boston Celtics this link looks like this: https://www.espn.com/nba/team/roster/_/name/bos/boston-celticsOnce we do this we can use pandas to extract the roster itself, we use the positional argument [0] to simply access the dataframe created. Then we create another variable to extract the links to the players profile with table_roster_links_init = pd.read_html(roster_url,extract_links='body')[0] and we extract only the link. Then we create a dictionary to use later to link each player name to its ESPN profile link, once we have re-arranged our table to be as we wish.roster_url = 'https://www.espn.com/nba/team/roster/_/name/bos/boston-celtics'table_roster_init = pd.read_html(roster_url)[0]table_roster_links_init = pd.read_html(roster_url,extract_links='body')[0] table_roster_links = table_roster_links_init['Name']names = []espn_links = []for i in range(len(table_roster_links)):    names.append(table_roster_links[i][0])    espn_links.append(str(table_roster_links[i][1]))names = remove(names)table_roster_dropped = (table_roster_init.copy())name_link_dict = {}for i in range(len(table_roster_links)):    name_link_dict[names[i]] = espn_links[i]We now re-arrange the players based on its salary. So from highest to lowest salary in the roster. We start by dropping an extra column Unnamed: 0 created with the extraction. Then we start removing all the non-sense from the salary definition such as the $ symbol, -- which is used for two-way players (as they’re paid per game played) and finally the , to create a single long value. We then converrt this value to int and we also assign a nan value to two-way players. We then re-arrange with sort_values the salaries to create our index of the players. The salaries won’t be displayed, so we can remove the six zeros for ease to read the variables. We then finally reset the index of the table. We also remove the first name of the players, to make it cleaner on the reddit page that has limited space (specially in new reddit).table_roster_dropped = table_roster_dropped.drop(['Unnamed: 0'], axis=1)table_roster_dropped['Salary'] = table_roster_dropped['Salary'].str.replace('$', '',regex=True)table_roster_dropped['Salary'] = table_roster_dropped['Salary'].str.replace('--', '0',regex=True)table_roster_dropped['Salary'] = table_roster_dropped['Salary'].str.replace(',', '', regex=True)table_roster_dropped['Salary'] = table_roster_dropped['Salary'].astype(int)table_roster_dropped['Salary'] = table_roster_dropped['Salary'].replace(0, np.nan)table_roster_dropped.sort_values(by='Salary', inplace=True, ascending=False)table_roster_dropped['Salary'] = table_roster_dropped['Salary'].div(1e6).round(decimals=1)table_roster_dropped['Name'] = table_roster_dropped['Name'].str.replace('\\d+', '',regex=True)table_roster_dropped = table_roster_dropped.reset_index(drop=True)Now we really create the tables, we start by iterating over the cleaned and re-sorted version of the table to create a first-look dataframe. This serves mostly for debugging and to create a dictionary capable for replacing the names for the names with links. We then go over to create the stats that we will use. We defined as a concise amount of data points per game, FG%, 3P%, rebounds, assists and stocks (steals+blocks). We verify if the player has games this season. Come the post-season you also need to verify if the player hasn’t played an N amount of games or in extreme cases simply remove it completely with an extra verification step (shown after the normal code). We switch the normal name to the hyper-linked name.outputRoster = []for i in range(len(table_roster_dropped)):    if \"Gallinari\" in table_roster_dropped['Name'][i]:        pass    else:        nameAndLink = '[' + table_roster_dropped['Name'][i].split(' ',1)[1] +']('+name_link_dict[table_roster_dropped['Name'][i]]+')'        tempSalary = str(table_roster_dropped['Salary'][i]) + 'M'        outputRoster.append(            {                'Name':nameAndLink,                'Age':table_roster_dropped['Age'][i],                'Salary': tempSalary            }        )outputRoster_df = pd.DataFrame(outputRoster)allStats = []for index, row in table_roster_dropped.iterrows():    #print(row)    dataread = pd.read_html(name_link_dict[row['Name']])    if len(dataread)&gt;1:                if 'GP' in dataread[2].columns and row['Name'] != \"Danilo Gallinari\":            allStats.append(                {                       'Name':row['Name'],                    'PPG':dataread[2]['PTS'][0],                    'FG%':dataread[2]['FG%'][0],                    '3P%':dataread[2]['3P%'][0],                    'RBG': dataread[2]['REB'][0],                    'APG': dataread[2]['AST'][0],                    'STOCK':(float(dataread[2]['BLK'][0])+float(dataread[2]['STL'][0]))                    })        else:                        pass    else:        pass                allStats_df = pd.DataFrame(allStats)for index,row in allStats_df.iterrows():    allStats_df['Name'][index] = outputRoster_df['Name'][check_string(row['Name'], outputRoster_df['Name'])]allStats_df.to_markdown('outputs/roster.md',stralign='center', numalign='center',index=False)For playoffs we had to run this due to both Kabengele and Gallo having played in the NBA and playoffs in the past.outputRoster = []for i in range(len(table_roster_dropped)):    if \"Gallinari\" in table_roster_dropped['Name'][i]:        pass    else:        nameAndLink = '[' + table_roster_dropped['Name'][i].split(' ',1)[1] +']('+name_link_dict[table_roster_dropped['Name'][i]]+')'        tempSalary = str(table_roster_dropped['Salary'][i]) + 'M'        outputRoster.append(            {                'Name':nameAndLink,                'Age':table_roster_dropped['Age'][i],                'Salary': tempSalary            }        )outputRoster_df = pd.DataFrame(outputRoster)allStats = []for index, row in table_roster_dropped.iterrows():    #print(row)    dataread = pd.read_html(name_link_dict[row['Name']])    if len(dataread)&gt;1:                if 'GP' in dataread[2].columns and dataread[2].iloc[1]['GP'] != '-' and dataread[2].iloc[1]['GP'] &lt;28 and row['Name'] != \"Danilo Gallinari\":            allStats.append(                {                       'Name':row['Name'],                    'PPG':dataread[2]['PTS'][1],                    'FG%':dataread[2]['FG%'][1],                    '3P%':dataread[2]['3P%'][1],                    'RBG': dataread[2]['REB'][1],                    'APG': dataread[2]['AST'][1],                    'STOCK':(float(dataread[2]['BLK'][1])+float(dataread[2]['STL'][1]))                    })        else:                        pass    else:        pass        ScheduleFor the schedule the very first thing is to verify the current month as such month = datetime.today().strftime('%b') so everything will be displayed on a monthly basis."
  },
  
  {
    "title": "Automatic Post Generator",
    "url": "/posts/automatic-post-generator/",
    "categories": "Python, Automation",
    "tags": "python, automation, website",
    "date": "2022-10-16 00:33:13 +0200",
    





    "snippet": "Automatic Post GeneratorThis post is about the creation of an automatic post generator (at the current date of 16/10/2022). The idea is to make possible, down the line, to automatically generate posts. Which will be meant to add things like sensor data and so on. The repository of this code can be found here.Base for the codeI’ve done a quick run down in google and found Kris van der Mast post on something similar. I also thought that mdutils would be an option, but it might be too strict to “normal” markdown usage, making the creation of the Front Matter hard.Kris van der Mast outputs the following Front Matter---layout: posttitle: Python script to generate a new Jekyll post with front matterdate: 2022-07-29 07:59:46 +0200comments: truepublished: truecategories: [\"post\"]tags: [\"jekyll\",\"python\",\"front matter\"]author: Kris van der Mast---But it requires a big input to run such as the followingpy .\\createMarkdown.py 2022-07-29 “Python script to generate a new Jekyll post with front matter” “jekyll python front_matter”We’d like to take the date automatically as we use the script and keep only the title. As we have the layout: post as a default we can also remove, as well for published and comments. The attributes categories and tags should be custom, so it should not be set within this, only created in order to allow us to modify it (i.e: categories: [\"\"].Create a simple Front Matter ready .md by simply requiring the TitleTo first run this I simply took the code from Kris van der Mast and updated it to automatically get the current date and also accept categories as my website allows for multiple categories. I need to update the function format_cat to check if the first letter of each word is upper cased or not. The code is extremely similar from Kris, but the end goal should differ/improve upon it.This was firstly in the commit from 29/07/2022. It is already added to the github pages.For the improvement of upper-cased words for categories I’ve seen this post and used the portion of regex for ease in the usage. The format_cat became the following codedef format_cat(cats):    a = ''    for s in cats.split():        if re.search(\"^[A-Z]\", s[0]) is not None:            a += f'\"{s.replace(\"_\", \" \")}\",'            #print(\"it is uppercase\")        else:            print(\"The initials of the words need to be upper for the categories\")            break    return a[:-1]However, the break doesn’t completely break the code, so running something like py .\\automaticMDGen.py \"Automatic post test lower case\" \"python jekyll front_matter\" \"Python Automation small text and testing lower case\" generates the following .md---title: Automatic post test lower casedate: 2022-08-02 12:01:54 +0200categories: [False]tags: [\"python\",\"jekyll\",\"front matter\"]author: Guilherme Theis---While we’d like to ideally break the code completely (not generate the .md I think).I’ve then posted this question on r/learnpython and got the correct understanding. I need to return none and then check whether it is truly none or not. So the overall view of the two necessary functions (format_cat and writte_frontmatter) need to be like the followingdef format_cat(cats):    a = ''    for s in cats.split():        if re.search(\"^[A-Z]\", s[0]) is not None:            a += f'\"{s.replace(\"_\", \" \")}\",'            #print(\"it is uppercase\")        else:            return None    return a[:-1]def format_filename(date, title):    return f'{date}-{title.replace(\" \", \"-\").lower()}.markdown'def write_frontmatter(args, date, current_time):    if format_cat(args.cats) is not None:        f = open(f\"./_posts/{format_filename(date, args.title)}\", \"w\")        f.write(\"---\\n\")        f.write(f\"title: {args.title}\\n\")        f.write(f\"date: {date} {current_time} +0200\\n\")        f.write(f\"categories: [{format_cat(args.cats)}]\\n\")        f.write(f\"tags: [{format_tags(args.tags)}]\\n\")        f.write(f\"author: {args.author}\\n\")        f.write(\"---\\n\")        f.close()    else:        print('Categories need to start in upper case, re-run the code with the correct input')                return None"
  },
  
  {
    "title": "How I setup this website",
    "url": "/posts/setupWebsite_post/",
    "categories": "Website, Github",
    "tags": "github, github pages, website",
    "date": "2022-07-28 22:50:00 +0200",
    





    "snippet": "How I set up this websiteFirstly I’ve found Techno Tim’s video about Jekyll, which uses the Chirpy’s Theme. From there was just a matter of following the different tutorials available. However, I had a problem where, when trying to save the gh-pages as my source branch for deployment, the save button would be greyed out. This was asked in stackoverflow. While there is no reasoning and real fix, there is the walk around of inspecting the button and removing the disabled attribute."
  }
  
]

